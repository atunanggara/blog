{
  
    
        "post0": {
            "title": "October 2020 Update",
            "content": "Summary . Just a quick update from my October 2020 self. . Introduction . It has been so long since I update this blog. Earlier this week, github warned me about the possibility of its action being disabled soon due to inactivity in this repository. So, that is enough of a nudge for me to update this site. I want to tell my own self, via this post, &quot;I am still learning.&quot; . As Rachel Thomas wrote, &quot;I usually advise new bloggers that your target audience could be you-6-months-ago.&quot; So, what have I learned since April 24, 2020? . . Credit: Photo by Faye Cornish on Unsplash . Community of Learners . What I have appreciated most looking back to my-6-months-ago self is the opportunity to learn. The concept of continuous learning has always been embedded in my training as a PhD, in which I am grateful for. But learning alone can be though. So, I am thankful for the community of learners in the Twin Cities area, particularly in Deep Learning and R. I would recommend you to find those communities in your area as well! . I was also given the opportunity to present on several different machine learning topics through these two communities. It has been a wonderful learning experience to distill them &quot;as simple as possible, but not simpler&quot; and transpire it to others. . In sharing the topics, I often use streamlit as my UI of choice. If you are interested in learning more about it, feel free to look at both my earlier blog post and this simple TensorFlow tutorial on sentiment analysis using deep learning in my repository. . Type-hinting in Python . In the past 6 months, I have grown to embrace type hinting in my Python code writing. As someone who works with data, providing hints on the kind of input(s) and output(s) of my code really helps me with streamlining my process and my code writing. Definitely check it out and follow along this excellent tutorial if you are interested. . A blog recommendation . I highly recommend Vicki Boykis&#39;s takes on tech news that are rooted in humanism, nuance, context, rationality, and a little fun. Her latest writing, The rise of the non-expert expert, is quite insightful in realizing the importance of the fundamentals in tech. She will be one of the keynote speaker for rstudio::global(2021). Plus, she introduced me to bardcore! . Concluding Thoughts . Lastly, there is less than two weeks before the US election. If you can, please vote! .",
            "url": "https://atunanggara.github.io/blog/python/streamlit/reflection/2020/10/24/October_2020_Update.html",
            "relUrl": "/python/streamlit/reflection/2020/10/24/October_2020_Update.html",
            "date": " • Oct 24, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Streamlit Tutorial",
            "content": "Summary . Expanding on streamlit&#39;s tutorial, I created a streamlit app on heroku. . Interlude . It has been a tough couple of weeks for me to grapple with events that unfolded about 30 minutes away from where I live. This Martin Luther King Jr. quote that I read on Chris Damian&#39;s blog post resonated with me: . “Let me say as I’ve always said, and I will always continue to say, that riots are socially destructive and self-defeating. … But in the final analysis, a riot is the language of the unheard. And what is it that America has failed to hear? It has failed to hear that the plight of the Negro poor has worsened over the last few years. It has failed to hear that the promises of freedom and justice have not been met. And it has failed to hear that large segments of white society are more concerned about tranquility and the status quo than about justice, equality, and humanity. And so in a real sense our nation’s summers of riots are caused by our nation’s winters of delay. And as long as America postpones justice, we stand in the position of having these recurrences of violence and riots over and over again.” . Excerpt from Martin Luther King Jr.’s speech “The Other America,” 1967 at Stanford University. . Curious on the context of the quote, I ended up listening to the whole speech on YouTube: . . I hope that the words of MLK Jr. provided a context on the institutional racism that pervades the world in which we live in. May we have a more just and kind society. . Introduction . I first heard about streamlit from a data scientist in the area. Supposedly, it can create an interactive web python app in a simplified manner. So, I went ahead and run through the tutorial to understand more on its capability. Since I am familiar with flask, I am going to compare it with streamlit in this introduction. . First off, compared to flask, streamlit is simpler when it comes to creating a dynamic web app. In flask, it is recommended to save the python file in .py files in root and the html file in .html files in templates folder. This is partly due to html being a verbose markup language. On the other hand, streamlit uses GitHub flavored markdown and both python and markdown co-exist in one single python file. Markdown syntax can render rich formatted content in a concise manner. Of course, combining python with markdown texts can be confusing at first. But, if one is already familiar with jupyter notebook, this format should come naturally. . Streamlit is created with fast deployment in mind. If one wants to have a perfect platform with all the bells and whistles, flask and django should be considered. However, if we want to keep things simple and get quick feedback from other teams, streamlit should be the way to go. . With that in mind, let&#39;s get to the streamlit tutorial. . Streamlit tutorial . My streamlit tutorial is deployed on heroku. The tutorial can be loosely divided into: . Interactive DataFrame | Drawing charts and maps | Add interactivity with Widgets | Show progress | Record a screencast | Feel free to take a look at the github repository to look into the tutorial_streamlit.py Python code. . Heroku deployment . For deploying the streamlit code into heroku, I followed along this YouTube video: . . However, there are two deviations from the video: . For the virtual environment, using my old pyenv resulted in heroku crashing during the deployment. So, I created a new pyenv specifically to deploy the streamlit to heroku. | For my setup.sh, I stripped away all the backslashes and the newline characters as recommended on the streamlit&#39;s forum: mkdir -p ~/.streamlit . echo &quot;[server] headless = true port = $PORT enableCORS = false &quot; &gt; ~/.streamlit/config.toml . | Concluding thoughts . Streamlit package is a simple way to deploy data driven app on the internet. I am excited to use this in creating a nice interactive machine learning web app in the future! .",
            "url": "https://atunanggara.github.io/blog/python/streamlit/2020/06/12/streamlit-tutorial.html",
            "relUrl": "/python/streamlit/2020/06/12/streamlit-tutorial.html",
            "date": " • Jun 12, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "On being a Virtual Section Leader for Code in Place 2020",
            "content": "Summary . I have had a wonderful experience teaching students how to code in Python through the Code in Place program. The best part of the experience has been the community building and engagement that are novel in the online learning world. So, thank you for giving me the chance to be a part of this, Code in Place team! . Introduction . The novel coronavirus has upended our lives in more ways than one. To be a part of the solution, I started by visualizing the number of confirmed positive cases in the state of Minnesota. The day after, I saw the opportunity to be a volunteer Python educator for Stanford University. However, there was a problem. . I was in bed at around 11ish PM on April 3rd when I started filling in the Google Form application on my phone for this Code in Place program. The due date was April 3rd. After answering a couple questions such as, Tell us about yourself (briefly, just a few sentences), I got stuck on Record a 5 min demo of yourself teaching MoonWeight (see handout for instructions). Answer this question with a link to your video. . I almost quit. But, I know that humans are reading through this form. If I were to write an explanation as to why I did not record a video and optimize all the other parts of the application to ensure my credibility, they would reach out. So, I answered, I am writing this in bed as I just learned about it tonight and will be able to send it to you if given a chance. I finally submitted all but the video at 11:31 PM. . Two days later, I was overjoyed when an email from the Code in Place team came to my inbox requesting my teaching video for the MoonWeight challenge. I recorded the teaching part and sent it back to them hoping that I would get picked as one of the section leader. . A few days later (April 7th), the welcome email came to my inbox: . Congratulations! . We reviewed close to one thousand section leader applications and we were impressed with your teaching! This is a formal invitation to join the Code in Place teaching team... . So the journey of being a volunteer section leader for Code in Place began from here on out. . Credit: Hoi L who won the Code in Place T-shirt design . Code in Place Experience . TL;DR: it was a wonderful experience. . Being a part of the Section Leaders community . I feel fully supported all throughout the lifecycle of the course by the team. Some of the highlights: . We had a virtual first meeting with Chris and Mehran (the two professors who provided lecture content) to welcome us all in this whole unique experience. | To prepare us, we had training a couple days before our first section meeting. It helps us plan our first meeting and ensures that we have a good first impression. | We then regrouped to share our first meeting with other section leaders and see where we can improve our future section meetings. | From week to week, Chris checked in with us to see how the section went. It was genuinely moving to see him (and his team) created an alternative material for week 3 when the first few sections who taught it had a bad experience with the original material. | The teaching team provided us section leaders with learning week to celebrate the end of our volunteering experience. It was inspiring to talk about the foundation of computer science education with other section leaders and also wrapping our head around the idea of zen of python. | . Cultivating a community in my section . With 8000+ students in the class, it can be easy to get lost in the crowd. So, the team provided a small group of 10-12 students a section to discuss and reinforce the materials that were given in the lecture. . Being one of the section leader, I tried my best to be a good support system to my global students. However, I believe that every section has their own unique dynamics. Here are a couple steps that I took for my section to cultivate a community: . I used polls and breakout sessions to see what would be the best way to make the session engaging. Breakout sessions seem to be what they enjoy the most after I asked for their feedback in betweeen week 1 and 2. This resulted in us having 2 breakout sessions each week to ensure that they get plenty of time to engage with other students in the group. | After each session, I make sure that the students have the content of the presentations and codes that they created so that they can easily refer back to it for their homework. | I tried to be available to my students each week. So, I provided them with office hours to help them with their homeworks and that seem to work well. I also reviewed their code every week to provide feedback on their coding aesthetics. | I often say I will get back to you when a student ask something that I have an inkling to, but not 100% sure of. I would rather say I am not sure than teaching the wrong thing, especially in a fundamental course. | . Service to the Code in Place community . Code in Place being an introductory course to Python is super important. I realized early on that even the very first step of installing python and PyCharm can be quite a hurdle for some of our students. I spent a couple hours helping students with the installation process in the beginning of the term. One of the highlight from it was this banter between me and one of the student after I tried to provide several ways to fix his installation problems: Me:... So, this might be the oldest trick in the history of software engineering... but have you tried to restarting your computer and see whether you can open the program after the restart? Student: I will implement this ancient wisdom. . | . It is important to keep things light-hearted in the midst of this global crisis. So, I wrote a simple command line program to mimic How much toilet paper? as one of the worked example for students to learn about variables. . | Creating google slides each week ended up becoming quite a routine for most of us section leaders. To save time, I scoured the teaching thread to see what others have done and re-purposed them for my section with my own twist. During the last three weeks of the course, I ended up collecting ones that I found and posted it in a thread for others to see each week. . | Going over and commenting a few of the optional final projects that students submitted. So far, the works that I reviewed are super creative and inspiring! . | . Final Thoughts . I wrote this post to reflect on the uniqueness of this wonderful community of students and teachers. Others have done more wonderful things than writing a post. One of the students, Regina, compiled her lecture notes on her website. The team created a podcast called Humans of Code in Place. Last but not least, one of the section leader even created a Karel Helper website. These are great examples of human ingenuity during a global crisis, so please check them out! . In conclusion, thank you. Thank you to the teaching team for letting me be a part of this experience. Thank you to my students for letting me be a part of your coding journey. Thank you to my readers for reading through this post. . Be well, . Atun .",
            "url": "https://atunanggara.github.io/blog/reflection/python/2020/05/26/Code-in-Place-2020.html",
            "relUrl": "/reflection/python/2020/05/26/Code-in-Place-2020.html",
            "date": " • May 26, 2020"
        }
        
    
  
    
  
    
  
    
        ,"post5": {
            "title": "Exploring Covid-19 Dataset",
            "content": "Summary . Visualizing Covid-19 patients number in the State of Minnesota using altair. The county data is taken from New York Times repository. . Introductions . I enjoy browsing through the data provided by the Minnesota Department of Health on Covid-19 cases daily. It provides the most up-to-date number of confirmed positive cases in the state. However, to get the historical data is a little circuitous. . So, I was thrilled to learn that the New York Times published their county-by-county Covid-19 data historically. It motivated me to create an interactive map of Minnesota and their historical data on a similar fashion as shown on the covid-19 dashboards. . In summary, using a Jupyter notebook, I want to showcase fastpages&#39; capacity to visualize interactive map and bar graph in Altair using Covid-19 data. . Results . Click on County to Filter Chart Below . Code Explanations . Here are the process to create the visuals shown above. Feel free to hit the badges above in order to see the code, or directly here. . Importing modules . I start by importing all the necessary components: . %reload_ext autoreload %autoreload 2 import pandas as pd import altair as alt import requests . I used %reload_ext autoreload Python magic in order to reload all changed modules before executing a new line. Pandas and Altair are used for the data formatting and data visualizations along with requests to obtain the json formatted data. . Data Extraction and Cleaning . New York Times County-by-county Data . I am getting the data from the New York Times repository and converting it into a pandas DataFrame: . # data from NY-Times: url=&quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv&quot; df = pd.read_csv(url) dfmn = df[df.state==&quot;Minnesota&quot;] dfmn[&#39;date&#39;] = pd.to_datetime(dfmn[&#39;date&#39;]) . As mentioned on the their github repository: . Many state health departments choose to report cases separately when the patient’s county of residence is unknown or pending determination. In these instances, we record the county name as “Unknown.” As more information about these cases becomes available, the cumulative number of cases in “Unknown” counties may fluctuate. . I dropped the unknown number of confirmed cases because the number of confirmed cases is higher than reported on the Minnesota Department of Health web site if I include them. . # drop the null values by first finding the index of the unknown, then use list # comprehension to drop the values unknown = dfmn[dfmn.isnull().any(axis=&quot;columns&quot;)].index dfmn = dfmn.drop([i for i in unknown], axis=0) del unknown # now that there is no null value: # convert the FIPS as string in integer format to match with the json county data for Minnesota dfmn.fips = dfmn.fips.astype(int).astype(str) . However, that is not the case for death counts. The death count discrepancies are on the 27th and the 26th of March. By checking between the Minnesota Department of Health web archive and our New York Times dataset, I decided to add the unknown death count data to Hennepin county. This might not reflect the reality, but adding the data to Hennepin county makes the most sense in order to maintain anonimity and accuracy of the data due to the county having the highest number of cases in the State of Minnesota. . # dealing with discrepancy with the death count: # use: https://web.archive.org/web/*/https://www.health.state.mn.us/diseases/coronavirus/situation.html # and see the difference between the two dates of 03/28 and 03/27 # 03-28 # dfmn[(dfmn.date==&quot;2020-03-28&quot;)&amp;(dfmn.deaths != 0)] # 03-27 # dfmn[(dfmn.date==&quot;2020-03-27&quot;)&amp;(dfmn.deaths != 0)] #hide # let&#39;s add the death data into Hennepin county for 03-27: dfmn.loc[dfmn[(dfmn.county==&quot;Hennepin&quot;)&amp;(dfmn.date==&quot;2020-03-27&quot;)].index[0],&#39;deaths&#39;] = 2 # new 2020-03-27: # dfmn[(dfmn.date==&quot;2020-03-27&quot;)&amp;(dfmn.deaths != 0)] # 2020-03-26 # dfmn[(dfmn.date==&quot;2020-03-26&quot;)&amp;(dfmn.deaths != 0)] # I added 1 death data into Hennepin county for 2020-03-26 dfmn.loc[dfmn[(dfmn.county==&quot;Hennepin&quot;)&amp;(dfmn.date==&quot;2020-03-26&quot;)].index[0],&#39;deaths&#39;] = 1 . County data . The topographic and FIPS data is taken from David Eldersved&#39;s github repository. . # getting minnesota county data url_counties = &quot;https://raw.githubusercontent.com/deldersveld/topojson/master/countries/us-states/MN-27-minnesota-counties.json&quot; resp = requests.get(url_counties) data= resp.json() del resp df_county = pd.json_normalize(data[&#39;objects&#39;][&#39;cb_2015_minnesota_county_20m&#39;][&#39;geometries&#39;]) df_county = df_county[[&quot;properties.GEOID&quot;,&quot;properties.NAME&quot;]] df_county.columns = [&#39;fips&#39;,&#39;county&#39;] del data . Combining Case count and County Data . We combine the two data sources using for loop: . # Remove state column since it is all in Minnesota: df3mneasy = dfmn.drop(&#39;state&#39;,1) # grabbing all the dates in the data for the for loop uniquedate = df3mneasy.date.unique() # an empty DataFrame for the new data countycase_df = pd.DataFrame() # add 0 cases and 0 deaths for counties that do not have cases values = {&#39;cases&#39;: 0, &#39;deaths&#39;: 0} for i in uniquedate: df = df3mneasy[df3mneasy.date == i] #filter for each date df = df_county.merge(df,&#39;left&#39;) # we want to keep all the counties df[&#39;date&#39;] = df[&#39;date&#39;].fillna(i) # fill the appropriate date df = df.fillna(value=values) # fill the zero counts countycase_df = countycase_df.append(df, ignore_index=True) # new DataFrame # remove df3mneasy and uniquedate del df3mneasy, uniquedate # getting the data for the latest date dfmnlatest = countycase_df[countycase_df.date==max(countycase_df.date)] . Counting New Cases . In order to get the number of new cases, I used pandas dataframe diff to calculate the difference of consecutive rows. . # getting data to see the increment of new cases per day newcases = countycase_df.sort_values([&quot;county&quot;,&quot;date&quot;],ascending=(True,True)) # grabbing all the county in minnesota uniquecounty = newcases.county.unique() # empty_df for newcases_df = pd.DataFrame() for i in uniquecounty: df = newcases[newcases.county == i] df[&#39;newcases&#39;] = df.cases.diff() df[&#39;newdeaths&#39;] = df.deaths.diff() newcases_df = newcases_df.append(df, ignore_index=True) del newcases, uniquecounty # I drop all the NAs because that means that on the first day, there were no differences to count newcases_df = newcases_df.dropna() . Visualization Code . First off, I created a few variables needed in order to render the visuals correctly: . # inspired by # https://github.com/github/covid19-dashboard/blob/master/_notebooks/2020-03-15-us-growth-by-state-map.ipynb # to fix the altair transformation alt.data_transformers.disable_max_rows() #https://github.com/altair-viz/altair/issues/1005#issuecomment-403237407 def to_altair_datetime(dt): return alt.DateTime(year=dt.year, month=dt.month, date=dt.day, hours=dt.hour, minutes=dt.minute, seconds=dt.second, milliseconds=0.001 * dt.microsecond) # getting the maximum and minimum date dmax = (countycase_df.date.max() + pd.DateOffset(days=3)) dmin = countycase_df.date.min() # getting the current_date curr_date = countycase_df.date.max().date().strftime(&#39;%Y-%m-%d&#39;) # getting the topographic data url_counties = &quot;https://raw.githubusercontent.com/deldersveld/topojson/master/countries/us-states/MN-27-minnesota-counties.json&quot; counties = alt.topo_feature(url=url_counties, feature=&#39;cb_2015_minnesota_county_20m&#39;) . In order to connect the three graphs, I created a variable selector: . # use selector selector = alt.selection_single(empty=&#39;none&#39;, fields=[&#39;county&#39;], init={&#39;county&#39;:&#39;Hennepin&#39;}) . I chose the empty field to be equal to &#39;none&#39;, in order to clear up the binding when I do not select any county. I also picked Hennepin county as the initial choice due to it being the highest number of cases. Altair&#39;s documentation provides a good read on all the different arguments. . Here I created a variable background for the topographic map of Minnesota: . background = alt.Chart(counties).mark_geoshape( stroke=&#39;black&#39; ).transform_lookup( lookup=&#39;properties.GEOID&#39;, from_=alt.LookupData(data=dfmnlatest,key=&#39;fips&#39;, fields=[&#39;county&#39;,&#39;cases&#39;,&#39;deaths&#39;,&#39;date&#39;]) ).encode( color=alt.Color(&#39;cases:Q&#39;,scale=alt.Scale(scheme=&#39;greenblue&#39;)), tooltip=[&#39;county:N&#39;,&#39;cases:Q&#39;,&#39;deaths:Q&#39;], ).properties( width=500, height=350, title=f&#39;Total Confirmed Cases by County as of {curr_date}&#39; ).add_selection( selector ).project(&#39;albersUsa&#39;) . I combined the topojson data with the dfmnlatest DataFrame using transform_lookup. I added the selector in the add_selection statement to connect it with the other graph. Vega provided a nice selection of color schemes that can be used in the graph. . Here I created a variable newcases to graph the new cases throughout the duration of the Covid-19 data: . newcases = alt.Chart(newcases_df).mark_bar().properties( width=500, height=350, title=&quot;New Confirmed Cases by County&quot;, ).transform_filter( selector ).add_selection( selector ).encode( x=alt.X(&#39;date:T&#39;, title=&#39;Date&#39;, timeUnit=&#39;yearmonthdate&#39;, axis=alt.Axis(format=&#39;%y/%m/%d&#39;, labelAngle=-30,titleColor=&#39;black&#39;), scale=alt.Scale(domain=[to_altair_datetime(dmin), to_altair_datetime(dmax)])), y=alt.Y(&#39;newcases&#39;, axis=alt.Axis(title=&#39;# of New Confirmed Cases&#39;,titleColor=&#39;black&#39;), ), color=alt.Color(&#39;county&#39;,scale=alt.Scale(scheme=&#39;viridis&#39;)), tooltip=[&#39;county:N&#39;,&#39;date:T&#39;, alt.Tooltip(&#39;newcases:Q&#39;,title=&#39;# of new cases&#39;), alt.Tooltip(&#39;newdeaths:Q&#39;, title=&#39;# of new deaths&#39;)] ) . The transform_filter tranform the filter based on the selection of our click. I used Tooltip wrapper for renaming the title of the column being grabbed from the newcases_df DataFrame. . Here I created a chart variable to show the breakdown of total confirmed cases in Minnesota: . chart = alt.Chart(dfmn).mark_bar().properties( width=500, height=350, title=&quot;Total Confirmed Cases by County&quot;, ).add_selection( selector ).encode( x=alt.X(&#39;date:T&#39;, title=&#39;Date&#39;, timeUnit=&#39;yearmonthdate&#39;, axis=alt.Axis(format=&#39;%y/%m/%d&#39;, labelAngle=-30,titleColor=&#39;black&#39;), scale=alt.Scale(domain=[to_altair_datetime(dmin), to_altair_datetime(dmax)])), y=alt.Y(&#39;sum(cases)&#39;, axis=alt.Axis(title=&#39;# of Total Cases&#39;,titleColor=&#39;black&#39;), ), color=alt.Color(&#39;county&#39;,scale=alt.Scale(scheme=&#39;viridis&#39;)), order=alt.Order( &#39;cases&#39; ), opacity=alt.condition(selector, alt.value(1), alt.value(0.5)), tooltip=[&#39;county:N&#39;,&#39;date:T&#39;,&#39;cases:Q&#39;, &#39;deaths:Q&#39;] ) . Finally, I created final_chart to combine all the three graphs together: . final_chart = alt.vconcat( background, newcases, chart, ).resolve_scale( shape=&#39;independent&#39;, ).configure( padding={&#39;left&#39;:10, &#39;bottom&#39;:0} ).configure_axis( labelFontSize=10, labelPadding=10, titleFontSize=12, ).configure_view( stroke=None ) final_chart . Concluding thoughts . I hope you enjoy the visualization and the breakdown summary on the process that I take to create this Altair visualization. The module is full of wonderful ways to create visualization that can enhance your analysis. Feel free to explore their gallery for more awesome graphs. . If you have any comments or would like to connect, add me on my LinkedIn profile! .",
            "url": "https://atunanggara.github.io/blog/jupyter/covid-19/altair/2020/04/02/covid-19-dataset.html",
            "relUrl": "/jupyter/covid-19/altair/2020/04/02/covid-19-dataset.html",
            "date": " • Apr 2, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "First Post - Setting up Index Page and About Me on fastpages",
            "content": "This first post will be about how I set up my Index Page and About Me for this fastpages site along with an introduction on how I stumble upon the platform. . Introduction . In the past couple of weeks, the Introduction to Machine Learning for Coders by Jeremy Howard has helped me better understand Random Forest technique and provided me with a nice introduction to deep learning. . . Then, Covid-19 happened. . Since I am a fan of fast.ai, I listened to Jeremy’s YouTube summary on the situation. At the end of his video, he pointed his audience to the fast.ai forum. . When I searched through it, I stumbled upon the beautiful Covid-19 Dashboards website. The beauty and simplicity of the format is what really sold me into creating my site using this fastpages. . Setting up . In terms of setting up fastpages, it is pretty self-explanatory. I am thankful to Abdul Majed for his nice walk-through video that helped reassure me that I am on the right track. . Yet, I find myself stumbling through what would be the next step for me once I have the blog template up and running. So, here is my attempt to share with you what I have done to customize the Index Page and About Me page. . Index Page . The Index Page can be accessed under index.html on the main repository: . Once I hit the Edit this file button, I used my markdown skill to edit the pages: . . A few things to note: . The Index Page is created using markdown, even though it is an html file. If you are not familiar with markdown, here are some guides from fastpages or from github | Line 6 uses &lt;!-- in the beginning and --&gt; at the end to comment the index.html file. Since markdown do not have the capacity to comment, I used html comment tag instead. | The welcome image is taken from flickr. I embedded the image by uploading it into github repository images folder and coding it into the page (![edit pages](/blog/images/markdown_posts/first_post/Index-playaround.png)). | . About Me . The About Me page can be accessed under _pages/about.md on the main repository: . Same process as the Index Page setup above. . Summary . I hope that this post will help others who are trying to set up their Index Page and About Me fastpages site. Feel free to reach out to me on LinkedIn or Twitter if you have any questions! .",
            "url": "https://atunanggara.github.io/blog/fastpages/2020/03/25/First-Post.html",
            "relUrl": "/fastpages/2020/03/25/First-Post.html",
            "date": " • Mar 25, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I got interested in data science after receiving my Ph.D. in the computational chemical engineering catalysis area and did my post-doc in the First Year of Studies program at the University of Notre Dame. . My post-doc experience provided me the opportunity to work with various data science techniques. Sentiment analysis, n-gram analysis, and topic modeling were some of the techniques that I have performed on various textual data, including students’ reflection and survey results. Creating statistical summary and Tableau dashboard for various stakeholders in the university have also been a part of my experience. . Currently, I am continuing to level up my data science skills. That includes being a part of the deep learning study group in the community. .",
          "url": "https://atunanggara.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://atunanggara.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}